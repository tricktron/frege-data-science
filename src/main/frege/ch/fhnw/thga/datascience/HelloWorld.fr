module ch.fhnw.thga.datascience.HelloWorld where

targetFunction x = x * x

startDescent x e f = fst $ descent 100 e (f(x),x) e f

descent limit old_yDiff (y, x) e f =
    let
        minFxAndX  = minimum [
                        (f(x-e), x-e),
                        (y,      x  ),
                        (f(x+e), x+e)
                     ]
        yDiff = abs $ fst(minFxAndX) - y
        newE  = if (yDiff == 0.0) then e / 2.0 else e
    in
    if  traceLn ("Limit: " ++ show limit ++ " e: " ++ show e ++ " y/x: " ++ show minFxAndX) ||
        limit < 1 || e < 0.001
    then minFxAndX
    else descent (limit - 1) yDiff minFxAndX newE f



main = do
    print "Gradient Descent. Minimum value of the function is at x="
    println $ show $ startDescent (-1.1) 8.0 targetFunction
