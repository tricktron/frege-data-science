module ch.fhnw.thga.datascience.Descent where


targetFunction :: Num a => a -> a
targetFunction x = x * x

data Probe = Probe {
    x::     Double,
    fx::    Double,
    dist::  Double,
    f::     (Double -> Double)
}

{-- Starting the descent to find the x value where f(x) is minimal.
    @x@ the start value, a candidate where to look for minimum.
    @dist@ an initial distance how far around x to look for the local minimum.
    @f@ the target function that determines the f(x) value that should be minimal.
-}
startDescent :: Double -> Double -> (Double -> Double) -> Double
startDescent x dist f = result.x where
    result = head $ dropWhile (\probe -> probe.dist > 0.001 ) $ take 1000000 probes   -- selection
    probes = iterate descent Probe{ x=x, fx=f(x), dist=dist, f=f }                    -- production (lazy)

descent :: Probe -> Probe
descent Probe { x=x, fx=fx, dist=dist, f=f }
    -- | ! (traceLn ("x: " ++ show x ++ " fx: " ++ show fx ++ " dist: " ++ show dist))
    =
    Probe { x=snd minFxX, fx=fst minFxX, dist=newDist, f=f } where
        minFxX  = minimum [          -- min of a pair only looks at the first value
                     (f(x-dist), x-dist),
                     (fx,        x  ),
                     (f(x+dist), x+dist)
                  ]
        fxDiff   = abs $ fst(minFxX) - fx
        newDist  = if (fxDiff == 0.0) then dist / 2.0 else dist

import Test.QuickCheck

min_property = property $ \(n::Double) -> startDescent (n * 10.0) n targetFunction < 0.01

main :: IO ()
main = do
    print   "Minimum value of the function is at x="
    println $ show $ startDescent 10.0  1.0 targetFunction
    quickCheck min_property

